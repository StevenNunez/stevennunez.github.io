<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hostile Developer</title>
  <subtitle>I am Steven, hear me rant.</subtitle>
  <id>https://hostiledeveloper.com/</id>
  <link href="https://hostiledeveloper.com/"/>
  <link href="https://hostiledeveloper.com/feed.xml" rel="self"/>
  <updated>2021-04-16T19:27:00Z</updated>
  <author>
    <name>Steven Nunez</name>
  </author>
  <entry>
    <title>Phoenix on Turbo</title>
    <link rel="alternate" href="https://hostiledeveloper.com/2021/04/16/phoenix-on-turbo.html"/>
    <id>https://hostiledeveloper.com/2021/04/16/phoenix-on-turbo.html</id>
    <published>2021-04-16T19:27:00Z</published>
    <updated>2021-04-19T11:21:36-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Ok, so there&amp;rsquo;s a lot of excitement around &lt;a href="https://hotwire.dev"&gt;Hotwire&lt;/a&gt;,
a way of building web apps by focusing on sending HTML Over the WIRE (get it!?).
Hotwire and the supporting library Turbo came out of building &lt;a href="https://hey.com"&gt;hey.com&lt;/a&gt;, an email service. It was
built to make Rails development snappier, and more dynamic. It also allows for an easy way to
build mobile apps backed by your webapp.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s interesting is that it&amp;rsquo;s not just limited to Rails. Since the whole idea is sending HTML
down to the client, we can use our favorite server side language to generate that markup
and join in on the fun.&lt;/p&gt;

&lt;p&gt;Now, when I say &amp;ldquo;snappier and more dynamic&amp;rdquo; you say LiveView. I get it. In this post, we&amp;rsquo;ll discuss
why this approach is a good way of getting high performance page rendering and better composibility
out of your existing request/response app.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
  &lt;img width="100%" src="https://images.unsplash.com/photo-1565052594002-8ee542c415bd?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMzc3OTd8MHwxfHNlYXJjaHwxfHxsaXZlJTIwd2lyZXxlbnwwfHx8fDE2MTgzNTQ5MjA&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=400" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@cwrhoads?utm_source=seance&amp;utm_medium=referral"&gt;Chris Rhoads&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;
&lt;div&gt;&lt;/p&gt;

&lt;h2&gt;What is Turbo?&lt;/h2&gt;

&lt;p&gt;Turbo is made up of 3 components available in the &lt;code&gt;@hotwired/turbo&lt;/code&gt; js library: Turbo Drive, Turbo Frames, and Turbo Streams.&lt;/p&gt;

&lt;h3&gt;Turbo Drive&lt;/h3&gt;

&lt;p&gt;Turbo Drive gives your pages a nice boost for &amp;ldquo;free&amp;rdquo;. It converts all of your http calls into XHR requests and replaces the body in line. If you think this sounds a lot like &lt;a href="https://github.com/turbolinks/turbolinks"&gt;turbolinks&lt;/a&gt;, you&amp;rsquo;re right! Turbo Drive is the next generation of that concept.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice I used &lt;em&gt;free&lt;/em&gt; in quotes. Turbo Drive places state &lt;em&gt;in the browser&lt;/em&gt;. From the &lt;a href="https://turbo.hotwire.dev/handbook/building"&gt;Handbook&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Turbo is fast because it prevents the whole page from reloading when you follow a link or submit a form. Your application becomes a persistent, long-running process in the browser. This requires you to rethink the way you structure your JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Phoenix developers you&amp;rsquo;ll notice one key difference between this and LiveView. Where state lives. BOTH are long lived processes and require us to change parts of how we build applications. With Turbo Drive, you can&amp;rsquo;t rely on a page to load and setup your event handlers/socket connections etc. You&amp;rsquo;ve got to hook into the &lt;code&gt;turbo:load&lt;/code&gt; event for setup and teardown. We&amp;rsquo;ll see this in action when we talk about Turbo Streams over Channels.&lt;/p&gt;

&lt;p&gt;The cool thing about Turbo Drive is that there&amp;rsquo;s no code other than adding &lt;code&gt;import * as Turbo from &amp;quot;@hotwired/turbo&amp;quot;&lt;/code&gt; into your &lt;code&gt;app.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;Turbo Frames&lt;/h3&gt;

&lt;p&gt;This is probably my favorite Turbo feature. FRAMES! Turbo
Frames let you compose web pages from &lt;em&gt;several&lt;/em&gt; endpoints,
letting you reuse your already existing markup on different
pages. This is huge! If you&amp;rsquo;ve got an existing HTML
endpoint, you can start to mix and match them using Turbo
by just marking up your&amp;hellip; markup. Also, async requests are
a snap too. Just add an &lt;code&gt;src&lt;/code&gt; attribute and it will it hit the
endpoint and load the results in-line.&lt;/p&gt;

&lt;h3&gt;Turbo Streams&lt;/h3&gt;

&lt;p&gt;Turbo Streams allow you to send fragments of HTML via
WebSockets/Server Side Events. You&amp;rsquo;ll receive a fragment of
HTML that, once you add it to the DOM, will position itself
relative to an anchor element and a directive. Sounds like
a lot, and to be honest, it takes some work to get it wired
up. While talking to the rest of my brain &lt;a href="https://twitter.com/sm_debenedetto"&gt;Sophie
DeBenedetto&lt;/a&gt;, she
called out that there&amp;rsquo;s a lot of boilerplate to get this
working with Phoenix Channels vs just using LiveView. I
think one thing to keep in mind here is that Chris McCord
worked his butt off to make LiveView feel seamless. I&amp;rsquo;m
sure we can abstract this away to make it just as nice.&lt;/p&gt;

&lt;p&gt;OK, let&amp;rsquo;s build a thing.&lt;/p&gt;

&lt;h2&gt;Issue Tracker&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to be adding Turbo to a simple issues app. It&amp;rsquo;s
not tied to anything so really this is just a therapy app
where your friends can comment on your issues. You can pull
down the starter code
&lt;a href="https://github.com/octosteve/third_rail/tree/main"&gt;here&lt;/a&gt;.
As it stands, it&amp;rsquo;s pretty unusable.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/S2Hzahe.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;This is pretty standard scaffolding. You get to your first
wart when you create a new comment. Issues and Comments are
handled by 2 different controllers and require you to hit 2
different routes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add Turbo to see if we get any wins out of the box&lt;/p&gt;

&lt;h3&gt;Adding Turbo&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;npm install --save @hotwired/turbo --prefix assets&lt;/code&gt;
at the root of your project. Then open up &lt;code&gt;app.js&lt;/code&gt; and
include this.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/ebf92fc9c1d77965376efc9b9a05d4ba.js"&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s see what we get.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/aW3Dpol.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;Still terrible&amp;hellip; but it&amp;rsquo;s &lt;em&gt;fast&lt;/em&gt;. You can see that all
requests to our backend were made via AJAX, with portions
of our page&amp;rsquo;s &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; being replaced in-line.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start moving towards making this&amp;hellip; less terrible by
using Turbo Frames&lt;/p&gt;

&lt;h2&gt;Showing Comments&lt;/h2&gt;

&lt;p&gt;As a thought experiment, let&amp;rsquo;s think about &lt;em&gt;why&lt;/em&gt; you&amp;rsquo;d
want to have 2 separate endpoints for issues and comments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If your authorization logic is complex enough, deciding which comments to render
and how people can interact with
them can become a pretty hairy bit of code. Keeping them
separate allows your endpoint to focus on doing one thing
well.&lt;/li&gt;
&lt;li&gt;Speed. The data I need to render an issue is minimal.
Bringing in comments on that initial page load along with
pagination logic can slow the page down significantly.&lt;/li&gt;
&lt;li&gt;None of these things are real for our stupid example,
but leave a comment on when you&amp;rsquo;ve seen this in the wild
and why you did it!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These reasons could be the best ones in the world, but no
one cares because it&amp;rsquo;s unusable. Let&amp;rsquo;s fix that.&lt;/p&gt;

&lt;p&gt;Update the comments &lt;code&gt;index.html.eex&lt;/code&gt; to
look like this:&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/8ef815eaa4423ce54980f6e12cbcb8b5.js"&gt;&lt;/script&gt;

&lt;p&gt;And replace update the Issue&amp;rsquo;s &lt;code&gt;show.html.eex&lt;/code&gt; template to
look like this.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/55987ebabca10312bd81c8a0ff3c58a6.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/yma3gOc.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;THIS IS COOL! Think of those &lt;code&gt;&amp;lt;turbo-frame&amp;gt;&lt;/code&gt; elements as
landing pads. Turbo uses those tags along with the &lt;code&gt;id&lt;/code&gt; field
to pick out sections of the response and
replaces &lt;em&gt;just those portions in line&lt;/em&gt;! Everything else is
ignored.&lt;/p&gt;

&lt;p&gt;In our example, we&amp;rsquo;re returning the &lt;em&gt;whole&lt;/em&gt; page back; layout and all when a user clicks &lt;code&gt;Show Comments&lt;/code&gt; the link.
We can prevent the layout from being rendered by looking for the
the &lt;code&gt;turbo-frame&lt;/code&gt; request header and only sending the relevant part of the page
back.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/7d996d49ec823a605f09f5c0f762aaed.js"&gt;&lt;/script&gt;

&lt;p&gt;Now you get back &lt;em&gt;just&lt;/em&gt; the comments index, without the layout!&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/FuTMMU9.png" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;This still kind of sucks though. What is this? the 90s? I
want my page to load, and I want a spinner! For this to
preload, all we need to do is change the issue&amp;rsquo;s
&lt;code&gt;show.html.eex&lt;/code&gt; to this.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/40f47dc410bb13165e842c3b4c6b8d17.js"&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s see what this buys us, then we&amp;rsquo;ll go over the code.
The takeaway from here is that we&amp;rsquo;ve &lt;em&gt;only&lt;/em&gt; added 5 lines
of markup, a plug to make it a bit quicker. The plug was optional!&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/FFBbRL9.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;I think we&amp;rsquo;re starting to get &lt;em&gt;less&lt;/em&gt; terrible. GO TEAM.
Let&amp;rsquo;s move on to Streams.&lt;/p&gt;

&lt;h3&gt;Streams or Screams&lt;/h3&gt;

&lt;p&gt;So far, I&amp;rsquo;ve been cheating a bit. If you take a look at our
CommentController, I &lt;a href="https://github.com/octosteve/third_rail/blob/c86f23193777723ab6c1fc72a2017c67fef42d8f/lib/third_rail_web/controllers/comment_controller.ex#L15-L18"&gt;redirect &lt;em&gt;back&lt;/em&gt; to the issue&lt;/a&gt;. This
makes the page refresh, reload the comments and we&amp;rsquo;re just about
ready to accept our UX awards. Streams present us another
opportunity to do something nice here. If we wrap our form in a &lt;code&gt;&amp;lt;turbo-frame&lt;/code&gt;&amp;gt;, an accept header of
&lt;code&gt;text/vnd.turbo-stream.html&lt;/code&gt; is added to the request. If we send back a specially
formatted response, along with a response content type, it integrates the response on the page.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s modify our controller to check for this header, and send
down a specially crafted message in response to a form
submission.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/21865b2d93b411ecb57c711e5843be86.js"&gt;&lt;/script&gt;

&lt;p&gt;Following along with the numbers.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MORE PLUGS! Here we&amp;rsquo;re going to added a value into
&lt;code&gt;conn.assigns&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; If we can handle a stream for the response we&amp;hellip;&lt;/li&gt;
&lt;li&gt;add the &lt;code&gt;text/vnd.turbo-stream.html&lt;/code&gt; content-type in the
response. THIS IS CRITICAL! Had to reach out the the
&lt;em&gt;great&lt;/em&gt; &lt;a href="https://twitter.com/jamie_gaskins"&gt;Jamie Gaskins&lt;/a&gt;
for help on this bit. THANKS!&lt;/li&gt;
&lt;li&gt;Finally we render a template that adds the magic bits
for the comment to wind up in the right place on the DOM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;re going to modify the Comment&amp;rsquo;s &lt;code&gt;index.html.eex&lt;/code&gt; to return a new &lt;code&gt;turbo-frame&lt;/code&gt; with an id of  &lt;code&gt;comment_list&lt;/code&gt;.
This isolates &lt;em&gt;just&lt;/em&gt; the list of comments and excludes the header. We then add the fragment we&amp;rsquo;d like inserted
along with where we&amp;rsquo;d add it.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/a195ab2e4ff955a6341d98e061d6cce5.js"&gt;&lt;/script&gt;

&lt;p&gt;From the &lt;a href="https://turbo.hotwire.dev/handbook/streams"&gt;docs&lt;/a&gt;
you can see our &lt;code&gt;action&lt;/code&gt; options are &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;prepend&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and
&lt;code&gt;delete&lt;/code&gt;. They do what you expect. The &lt;code&gt;target&lt;/code&gt; is the id
of the element you&amp;rsquo;re&amp;hellip; well, targeting.&lt;/p&gt;

&lt;p&gt;One last bit is you have to wrap the form in a
&lt;code&gt;&amp;lt;turbo-frame&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/cb07d966ce06490dafdadbb414778978.js"&gt;&lt;/script&gt;

&lt;p&gt;Now we get this!&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/r9rckHd.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;Streams are a great feature, but we need to
smooth this out if we want any real usage.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one more bit of work we need to add to complete our
Turbo Tour. Updated comments over channels.&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;Ok, so this is going to be a lot.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;re going to join a channel tied to an issue&amp;rsquo;s comments.&lt;/li&gt;
&lt;li&gt;When we visit a different issue, we&amp;rsquo;ll need to disconnect from that channel and join a new channel.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ll update the &lt;code&gt;create_comment_for_issue&lt;/code&gt; function in our &lt;code&gt;Core&lt;/code&gt; module to emit a &lt;code&gt;new_comment&lt;/code&gt; message with the &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the channel, we&amp;rsquo;ll look up the comment, and follow the Hotwire philosophy by sending down the HTML we want on the page.&lt;/li&gt;
&lt;li&gt;Oh, and we&amp;rsquo;ll have to convert the string of markup into DOM elements and add them to the body on the client side.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Like I said&amp;hellip; a lot.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
  &lt;img width="100%" src="https://images.unsplash.com/photo-1521075486433-bf4052bb37bc?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMzc3OTd8MHwxfHNlYXJjaHwyfHxkZXNwYWlyfGVufDB8fHx8MTYxODU5NDc5Mw&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=400" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@kaimantha?utm_source=seance&amp;utm_medium=referral"&gt;Claudia Wolff&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;
&lt;div&gt;&lt;/p&gt;

&lt;h3&gt;Setting up Channels&lt;/h3&gt;

&lt;p&gt;Channels are kind of magic in that unlike with LiveView, we don&amp;rsquo;t need to manually subscribe via PubSub, and write our own &lt;code&gt;handle_info&lt;/code&gt; function to update state. If we &lt;code&gt;broadcast&lt;/code&gt; a message to a topic matching the channel name, unless we intervene, that message will be sent down to the client. To be clear, by joining the &lt;code&gt;comment:issue:9&lt;/code&gt; channel, we will receive &lt;em&gt;all&lt;/em&gt; messages broadcast to the &lt;code&gt;comment:issue:9&lt;/code&gt; topic.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run &lt;code&gt;mix phx.gen.channel Comment&lt;/code&gt;, and add
&lt;code&gt;channel &amp;quot;comment:issue:*&amp;quot;, ThirdRailWeb.CommentChannel&lt;/code&gt;
to &lt;code&gt;user_socket.ex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s update the channel to look like this:&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/65641a4cd92c4653ea2f90e368a42df6.js"&gt;&lt;/script&gt;

&lt;p&gt;We don&amp;rsquo;t have to do anything with &lt;code&gt;issue_id&lt;/code&gt; on join, but
that&amp;rsquo;s where&amp;hellip; security happens. We&amp;rsquo;ll intercept the
&lt;code&gt;new_comment&lt;/code&gt; message, and instead of just broadcasting the
&lt;code&gt;id&lt;/code&gt; to the client, we&amp;rsquo;ll convert it to the template we want on the page.
We need to intercept the message, otherwise only the &lt;code&gt;id&lt;/code&gt; will be sent down to the client.&lt;/p&gt;

&lt;p&gt;A quick glance at the broadcasting code:&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/18f895978f0857486f488fa99c97f4ba.js"&gt;&lt;/script&gt;

&lt;p&gt;Now onto the client!&lt;/p&gt;

&lt;h3&gt;Setup and Teardown&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s add a data element to the issue so we know which
channel to connect to. Open up the issues &lt;code&gt;show.html.eex&lt;/code&gt;
file, and change the header to &lt;code&gt;&amp;lt;h1 id=&amp;quot;issue&amp;quot; data-issue-id=&amp;quot;&amp;lt;%= @issue.id %&amp;gt;&amp;quot;&amp;gt;Show
Issue&amp;lt;/h1&amp;gt;&lt;/code&gt;. This will give us a way of knowing we&amp;rsquo;re on a
page for a specific issue, &lt;em&gt;and&lt;/em&gt; which issue it is.&lt;/p&gt;

&lt;p&gt;In the JavaScript, we&amp;rsquo;ll&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Listen for the &lt;code&gt;turbo:load&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;Disconnect from our channel, if we&amp;rsquo;ve already connected&lt;/li&gt;
&lt;li&gt;See if we&amp;rsquo;re on a page for an issue&lt;/li&gt;
&lt;li&gt;Connect to the comments channel for that issue.&lt;/li&gt;
&lt;li&gt;Respond to the &lt;code&gt;new_comment&lt;/code&gt; message by appending it to
the DOM. Turbo does the rest.&lt;/li&gt;
&lt;/ol&gt;

&lt;script src="https://gist.github.com/octosteve/0c610b5bcbf4e3438bd783647dbff300.js"&gt;&lt;/script&gt;

&lt;p&gt;We&amp;rsquo;ll listen for that &lt;code&gt;turbo:load&lt;/code&gt; event, and try to
disconnect. If the page we&amp;rsquo;re on is an issue, we join that
channel. Here&amp;rsquo;s &lt;code&gt;disconnectChannel&lt;/code&gt; and &lt;code&gt;joinChannel&lt;/code&gt; along with the message handler.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/142378b7a7c083242485e56546e41447.js"&gt;&lt;/script&gt;

&lt;p&gt;Here we have the supporting code.&lt;code&gt;disconnectChannel&lt;/code&gt; leaves the channel if it exists, then nullifies our variable (Yey! global mutable state!). &lt;code&gt;joinChannel&lt;/code&gt; is where we conenct to that new channel and setup a listener for new messages.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addToBody&lt;/code&gt; uses a &lt;code&gt;DOMParser&lt;/code&gt; instance to convert strings to HTML. Then then addes it to the bottom of the document body.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what that gets us.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/ZMkqlL5.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;Yey? We&amp;rsquo;re still inserting the &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; response
from the form. We can get rid of that to remove the
duplicate comment. Revert it back to the previous version and
let&amp;rsquo;s take a look.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/uhcaMYH.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;Voilà! We&amp;rsquo;re getting messages from a websocket and adding
them to the page! This also got us cross browser updates!&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/I9DUPOV.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;h1&gt;Wrap&lt;/h1&gt;

&lt;p&gt;I really like how Turbo makes composing applications easy. I see
this as an analog to using LiveView Components to compose a larger View.
And the additional benefit of using your existing request/response endpoints is
compelling.&lt;/p&gt;

&lt;p&gt;If you have a document based dashboard with some light interactivity, and
you&amp;rsquo;ve found yourself reaching for React, maybe give Turbo a try with some &lt;a href="https://stimulus.hotwire.dev/"&gt;Stimulus&lt;/a&gt; sprinkled in.&lt;/p&gt;

&lt;p&gt;Personally, I&amp;rsquo;d see having to add high interactivity to a page in Phoenix as the time to reach for LiveView.&lt;/p&gt;

&lt;p&gt;Is Hotwire the future and is it worth adding it to your Phoenix apps? Leave a comment and let me know what you think.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Phoenix Contexts and Crossing Boundaries</title>
    <link rel="alternate" href="https://hostiledeveloper.com/2020/08/13/phoenix-contexts-and-crossing-boundaries.html"/>
    <id>https://hostiledeveloper.com/2020/08/13/phoenix-contexts-and-crossing-boundaries.html</id>
    <published>2020-08-13T03:45:00Z</published>
    <updated>2021-04-16T15:16:13-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When the &lt;code&gt;contexts&lt;/code&gt; were introduced in Phoenix I was really
excited. Baking in Domain Driven Design (DDD) concepts felt like
a good guardrail. It would make us create lines in our
code. Boundaries that would force us to get to know our business
better, and in the process become better developers.&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://images.unsplash.com/photo-1581854406835-db14e52aa35e?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=400&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEzNzc5N30" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@hiro7jp?utm_source=seance&amp;utm_medium=referral"&gt;Hiroshi Tsubono&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Fine and dandy until you bump up against your business&amp;rsquo;
&amp;ldquo;God&amp;rdquo; entity. The thing that is literally all things to
everyone. Working at &lt;a href="https://flatironschool.com/"&gt;Flatiron School&lt;/a&gt; you can imagine what
our big entity in the sky is.&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://i.imgur.com/VXixkkt.png" /&gt;&lt;/p&gt;

&lt;p&gt;Students are everywhere. Well, sort of. When we&amp;rsquo;re trying
to find the right fit for them, they&amp;rsquo;re applicants. Before
that, they&amp;rsquo;re leads. When they join, they&amp;rsquo;re students, and
then on to becoming graduates! Then they become Job Seekers, and
then awesome developers.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;re a lot of things to different departments, and those
departments care about different parts of the student.
Admissions officers care about how to get in contact with a
student, their schedules, and program of interest. They&amp;rsquo;re
interested in how applicants will handle tuition,
and finding relevant scholarship awards.&lt;/p&gt;

&lt;p&gt;Our instructors don&amp;rsquo;t care how you got there. If you&amp;rsquo;re
here, it&amp;rsquo;s time to work. They need your GitHub username, a
slack username, and your name.&lt;/p&gt;

&lt;p&gt;Our career services team cares about the program you&amp;rsquo;ve
completed, your interests as a developer, and where they
can help best connect you with the wider developer network.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s this look like in the context of&amp;hellip;. contexts?&lt;/p&gt;

&lt;h2&gt;Buckets of functionality&lt;/h2&gt;

&lt;p&gt;For your first pass you might try something like this:&lt;/p&gt;

&lt;div class="mermaid"&gt;
graph BT
    c1((Accounts))
    c2([Graduate Services])
    c3([Admissions])
    c4([Education])
    r1(Web Request) --&gt;|Get Graduation Date| c2
    r2(Worker) --&gt;|Calculate Financial Clearance| c3
    r3(Web Request) --&gt;|Get Student Progress| c4
    r4(Web Request) --&gt;|Update Profile| c1
c4 --&gt;|get_account/1|c1
c3--&gt;|get_account/1|c1
c2 --&gt;|get_account/1| c1

&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;d have all of your contexts just reach in and get the
&lt;em&gt;generic&lt;/em&gt; user data, then dump the data you don&amp;rsquo;t need.
You&amp;rsquo;d then run joins on your data and attach your
transformed user data at the last minute before responding
to your requests.&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://images.unsplash.com/photo-1589985270958-af9812c8ddb5?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=400&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEzNzc5N30" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@sxtcxtc?utm_source=seance&amp;utm_medium=referral"&gt;Sorin Gheorghita&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;What this diagram is showing is that there&amp;rsquo;s &lt;strong&gt;ONE&lt;/strong&gt; source
of truth for account information. None of these other
contexts can &lt;em&gt;directly&lt;/em&gt; assert FACTS regarding account
information. They can &lt;em&gt;use&lt;/em&gt; it to deliver an experience,
but it&amp;rsquo;s not theirs. Any changes have to go &lt;em&gt;through&lt;/em&gt; &lt;code&gt;Accounts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To be honest, I hate this. I either have to make clunky
requests for more data than I need, or I wind up making
functions that require a slew of Graphql like query
parameters to refine a query to what I want. All the while,
my &lt;code&gt;Accounts&lt;/code&gt; context gets more and more bloated under the
weight of having to support all of these &amp;ldquo;different things
to different people&amp;rdquo; cases. This sort or reminded me of something
else though&amp;hellip;&lt;/p&gt;

&lt;h3&gt;Are we doing microservies?&lt;/h3&gt;

&lt;p&gt;On the surface, this approach sort of feels like an
approach to microservices where you make synchronous
requests at run time to fulfill requests sent to your
system. The same problems apply here. You need a user?
Well you&amp;rsquo;ve got to go to the User service. Want a course
catalog? Hit the Course Management system. Oh, it&amp;rsquo;s not the data
you needed? Too bad, that&amp;rsquo;s what the service gives you. This approach
always bothered me since it made YOUR system vulnerable to
another systems availability. Now you&amp;rsquo;re on the hook for
circuit breakers and graceful degradation. FUN!&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://images.unsplash.com/photo-1493836512294-502baa1986e2?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=400&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEzNzc5N30" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@tjump?utm_source=seance&amp;utm_medium=referral"&gt;Nik Shuliahin&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s &lt;em&gt;another&lt;/em&gt; way of doing Microservices that might
work as good inspiration for us when working with Phoenix
Contexts.&lt;/p&gt;

&lt;h2&gt;CQRS&lt;/h2&gt;

&lt;p&gt;If you haven&amp;rsquo;t heard of CQRS, it&amp;rsquo;s a method of organizing a
distributed system where the central means of communication
is messaging. Here&amp;rsquo;s a sample interaction.&lt;/p&gt;

&lt;div class="mermaid"&gt;
graph TB
  r1[Web Request]
 s1((Account Service))
s2((Education Service))
mb[(Message Bus)]
r1 --&gt;|1. Request Profile Update| s1
s1 --&gt;|2. CQRS Magic| s1
s1 --&gt;|3.Response| r1
s1 --&gt;|4. Emit a message| mb
mb --&gt;|5. Message Consumed and integrated| s2


&lt;/div&gt;

&lt;p&gt;I glossed over the CQRS magic because the thing we care
about here is the messaging as a result of a change.
Let&amp;rsquo;s see what&amp;rsquo;s happening in the education service.&lt;/p&gt;

&lt;div class="mermaid"&gt;
graph TD
  Message --&gt;|Handles incoming messages| ag([Aggregator])
  ag --&gt;|Processes message and updates read model| db[(Read Model)]


&lt;/div&gt;

&lt;p&gt;From this point on, anytime the Education service needs
user information, it can read it from its eventually
consistent LOCAL data source. The beauty of this is that at
any point, our Account service goes down, our instructors
are able to keep on chuckin&amp;rsquo;. Here a read model is storing
ONLY the bits you need to do the job. Don&amp;rsquo;t be afraid to
take in data that would be &lt;code&gt;join&lt;/code&gt;ed in different databases
when writing one of these. You&amp;rsquo;re optimizing for reading,
not writing.&lt;/p&gt;

&lt;h2&gt;Ok, what&amp;rsquo;s this got to do with Phoenix?&lt;/h2&gt;

&lt;p&gt;This isn&amp;rsquo;t a bait and switch for me to write about CQRS. It
ties into Phoenix Contexts quite nicely. Say we look at
all of our Contexts as if they were microservices
using CQRS to keep &amp;ldquo;copies&amp;rdquo; of data. You wouldn&amp;rsquo;t want to
use Phoenix Pubsub to handle internal messages to keep
these copies up to date. That&amp;rsquo;d be crazy. What you DO want
is a way to keep your underlying &amp;ldquo;local&amp;rdquo; data up to date
with what the source of truth says is FACT. You also
want to &lt;em&gt;view&lt;/em&gt; this data in the way that makes the most
sense for your domain.&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://i.imgur.com/mKd8dvU.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Introducing SQL Views&lt;/h2&gt;

&lt;p&gt;For all intents and purposes you interact with SQL views
the same way you do any other table. You can create an Ecto
schema just like you would with any other table. You can
filter it like any other table. From your application&amp;rsquo;s
perspective, it&amp;rsquo;s just a table.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at some code.&lt;/p&gt;

&lt;h2&gt;Accounts and Education&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to model a couple of contexts. Accounts has an
underlying Account schema, SlackAccount schema, and a
GithubAccount schema. Then we&amp;rsquo;ll make the Education
Context. It&amp;rsquo;s world revolves around student progress and
cohort membership. You&amp;rsquo;ll see that the representation of
an &lt;code&gt;Account&lt;/code&gt; doesn&amp;rsquo;t really map on to what we&amp;rsquo;d need for a
student. The data is &lt;em&gt;there&lt;/em&gt;, it&amp;rsquo;s just not easy to get at.&lt;/p&gt;

&lt;div class="mermaid"&gt;
erDiagram
    accounts ||--o| slack-accounts : belongs-to
    accounts ||--o| github-accounts : belongs-to
&lt;/div&gt;

&lt;p&gt;On sign up we create an &lt;code&gt;account&lt;/code&gt; and you can link
a Github and Slack account if you want. This is what the
Account Schema Looks like.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/13fd0ffdaf8cab02030b43ff2d618e4f.js"&gt;&lt;/script&gt;

&lt;p&gt;Here&amp;rsquo;s SlackAccount&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/5151a3c18ca9895520b514e08758166f.js"&gt;&lt;/script&gt;

&lt;p&gt;And GithubAccount&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/3136237f9864024dc607b01739d4a8df.js"&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s add a top level &lt;code&gt;get/1&lt;/code&gt; function to our context that
fetches WAY too much data.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/4723cb5640e7ab75a22a151b345ffda2.js"&gt;&lt;/script&gt;

&lt;p&gt;So&amp;hellip; Even looking at this, we&amp;rsquo;re probably going to have to
do a lot of work to make this data useful. Checkout what
this get query looks like.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/S9AOptE.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;While having all of this data as joins make sense in this
context, it&amp;rsquo;s a pain in the neck for me to work with since
now I have to manage nested relationships every time I need
to render the parts of this account relevant to my domain.
Everytime I want to load a student&amp;rsquo;s progress, I&amp;rsquo;ll have to unwind
and wade through data I just don&amp;rsquo;t care about. Let&amp;rsquo;s leverage some
SQL to if it can help.&lt;/p&gt;

&lt;h3&gt;Generating a view&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to generate a view that returns a single record
for an account, and only with the parts we care about.
SQL TIME&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
  &lt;img width="100%" src="https://images.unsplash.com/photo-1512621387945-efb0d554f388?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=400&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEzNzc5N30" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@gohrhyyan?utm_source=seance&amp;utm_medium=referral"&gt;Goh Rhy Yan&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s perfect our query first. We&amp;rsquo;re going to bring in all
of the tables and join them, ensuring we always return an
account if it exists, even if it&amp;rsquo;s incomplete.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/e50c8c0c996ae15bf9b011a4e26f2738.js"&gt;&lt;/script&gt;

&lt;p&gt;We&amp;rsquo;re using &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt;s to prevent filtering out
accounts that don&amp;rsquo;t have github  or slack accounts linked.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/OXPdER4.png" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;SO GREAT! This data is what I would expect if I was working
with a &amp;ldquo;Student&amp;rdquo;. I can even rename columns to ones that make
sense for what I&amp;rsquo;m building. A field named &lt;code&gt;username&lt;/code&gt; on
the &lt;code&gt;SlackAccount&lt;/code&gt; struct makes total sense under accounts.
When I&amp;rsquo;m looking at this unified view, I&amp;rsquo;d like it named
slack_account.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the view:&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/893bf8928ca0d8a73badd4547e296b9f.js"&gt;&lt;/script&gt;

&lt;p&gt;That&amp;rsquo;s it! Now if you run a query against &lt;code&gt;students&lt;/code&gt;,
you&amp;rsquo;ll get this.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;first_name&lt;/th&gt;
&lt;th&gt;last_name&lt;/th&gt;
&lt;th&gt;username&lt;/th&gt;
&lt;th&gt;slack_username&lt;/th&gt;
&lt;th&gt;github_username&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Steven&lt;/td&gt;
&lt;td&gt;Nunez&lt;/td&gt;
&lt;td&gt;Steven The guy&lt;/td&gt;
&lt;td&gt;Steven the chatter&lt;/td&gt;
&lt;td&gt;Steven The Coder&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Ok, ok&amp;hellip; I see you squinting your eyes looking at the words
&amp;ldquo;small_hack&amp;rdquo; and wondering if I&amp;rsquo;m stealing all of your BitCoin with
this blog post. Rest assured, I have your best interest at
heart. You see, views have this weird feature in that in
most cases, you can write to them. Meaning you&amp;rsquo;d write to
the underlying table which means WE&amp;rsquo;VE BROKEN OUR CONTRACT
WITH THE SOURCE OF TRUTH. Wouldn&amp;rsquo;t it be nice if we could
make this query Read only? Well, that little &lt;code&gt;WITH&lt;/code&gt; trick
makes it so we spook Postgres enough to prevent it from
letting us run an insert.
Let&amp;rsquo;s generate the Student Schema and run a query. Then
we&amp;rsquo;ll try to insert a record.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/41eb1ab7cf228895c3f4b75289a78c43.js"&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s take it for a spin.&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://i.imgur.com/Gi4v9bb.gif" /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s beautiful! From here you can treat this view like any
other table. You can join it against other &amp;ldquo;local&amp;rdquo; data,
and always know your data is backed by the real source of
truth.&lt;/p&gt;

&lt;h2&gt;Odds and ends&lt;/h2&gt;

&lt;p&gt;So, this is cool. You&amp;rsquo;re going to change all of your
contexts to use views now. There are a couple of things to
think about. One is that you&amp;rsquo;re now tied to the source of
truth and any changes to that table&amp;rsquo;s structure can break
your views! Not great. It&amp;rsquo;s the reason you don&amp;rsquo;t want
microservices that share the same database. One benefit we
have on our side is that our unit tests will fail our build
since missing a column would likely be catastrophic to your
app.&lt;/p&gt;

&lt;p&gt;&lt;img width="100%" src="https://images.unsplash.com/photo-1434030216411-0b793f4b4173?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=400&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEzNzc5N30" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@craftedbygc?utm_source=seance&amp;utm_medium=referral"&gt;Green Chameleon&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;I wanted to mention &lt;em&gt;Materialized Views&lt;/em&gt;. We&amp;rsquo;re using
regular old views which means that when you run the query,
it&amp;rsquo;s running the underlying query RIGHT THEN AND THERE.
This means you&amp;rsquo;ll always have the latest data available. So
what&amp;rsquo;s a &lt;em&gt;Materialized View&lt;/em&gt;? It&amp;rsquo;s a view that&amp;rsquo;s stored on
disk and is rerun based on some trigger, say a record was
inserted into a specific table. Why would you want this?
What do you lose? If your queries are slow, Materialized
Views get you a wicked fast response since it&amp;rsquo;s reading a
cached value. What you lose is your data might lag a bit
depending on how expensive the query is. Setup is a little
different, but the concept is the same.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for today. Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Superb Supervisors. Designing for Failure</title>
    <link rel="alternate" href="https://hostiledeveloper.com/2020/08/12/superb-supervisors-designing-for-failure.html"/>
    <id>https://hostiledeveloper.com/2020/08/12/superb-supervisors-designing-for-failure.html</id>
    <published>2020-08-12T04:19:00Z</published>
    <updated>2021-04-16T15:16:13-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Supervisors are &amp;ldquo;have you tried turning it off and on
again?&amp;rdquo; turned into a programming strategy. We&amp;rsquo;ve all made
that trade off. Should I keep debugging what&amp;rsquo;s wrong, or
just reboot? Often, the reboot fixes it and we can just
move on.&lt;/p&gt;

&lt;p&gt;But supervisors can also be used to design systems that go
down and stay down. In this post we&amp;rsquo;re going to talk about
when we&amp;rsquo;d want to design this kind of system and how
exactly to do it.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to design a system of RabbitMQ consumers that
fail at the first sign of trouble. Do not pass go, do not
collect 200 dollars.&lt;/p&gt;

&lt;div&gt;
  &lt;img width="100%" src="https://images.unsplash.com/photo-1544393569-eb1568319eef?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=400&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjEzNzc5N30" /&gt;
&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@nadineshaabana?utm_source=seance&amp;utm_medium=referral"&gt;Nadine Shaabana&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=seance&amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;
&lt;div&gt;


You might be asking yourself, &amp;ldquo;Why would you build a
crashing consumer?&amp;rdquo; These consumers listen on the wire to
&amp;ldquo;Facts&amp;rdquo;. These Facts are non-negotiable. If you opt in for
a message, you MUST integrate it. Failure to do so
indicates you have issues with your underlying data. Your
read models may be out of sync for instance. Continuing to
consume message, even on DIFFERENT queues may lead to
your system doing its job poorly. For instance, if you are
consuming messages about an online store&amp;rsquo;s inventory,
prices, available discounts, and sales for an app that
tries to run projections of monthly sales, you&amp;rsquo;d better
alert someone if an inventory update fails to get consumed.
Here&amp;rsquo;s what we&amp;rsquo;ll be building:



&lt;div class="mermaid"&gt;
graph TD
Application --&gt; ConsumerGroup
ConsumerGroup --&gt; ConsumerSupervisor
ConsumerSupervisor --&gt; MushroomConsumer
ConsumerSupervisor --&gt; ToxicityConsumer
ConsumerGroup --&gt; ConsumerMonitor
ConsumerMonitor -.-MushroomConsumer
ConsumerMonitor -.-ToxicityConsumer
&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s talk about what&amp;rsquo;s going on here. Our application
starts a ConsumerGroup. This is a Supervisor that starts 2
complementary processes, a ConsumerSupervisor, responsible
for starting our consumers, and a ConsumerMonitor. We want
our consumer monitor to&amp;hellip; Monitor Consumers. At the first
sign of danger, it will instruct the ConsumerSupervisor to
stop the presses, and kill all of it&amp;rsquo;s children.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/RpagL6h.png" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;After we&amp;rsquo;ve fixed the problem, we&amp;rsquo;ll bring everything back
online. OK, let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h2&gt;Some Homework&lt;/h2&gt;

&lt;p&gt;Since we covered how to setup a Producer and Consumer Pools in
a &lt;a href="https://hostiledeveloper.com/2020/08/09/connection-pools-and-rabbitmq.html"&gt;previous
post&lt;/a&gt;
I won&amp;rsquo;t go into too much detail here. After setting them
up, our Supervison tree should look like this.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/CUPLoFj.png" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;Great, on to our supervisors.&lt;/p&gt;

&lt;h2&gt;Bottom Up&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start at the base of our Supervision tree, the
Consumers. We&amp;rsquo;re going to use ExRabbitPool&amp;rsquo;s Consumer
module to save us some boilerplate, and we&amp;rsquo;ll customize our
restart strategy to support our &amp;ldquo;Burn the world&amp;rdquo; approach.
&lt;script src="https://gist.github.com/octosteve/9d2f70621f8b780d05b51a9a1b9c78c5.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The biggest difference here is we set the restart option
to &lt;code&gt;:temporary&lt;/code&gt;. Supervised processes can set 1 of 3
restart option.
1. &lt;code&gt;:permanent&lt;/code&gt; (default): If it dies, bring it back to
life no matter what.
2. &lt;code&gt;:transient&lt;/code&gt;: Only bring me back if I die under
suspicious conditions. If I die with a &amp;ldquo;normal&amp;rdquo; reason,
then it&amp;rsquo;s fine. Get me nice flowers.
3. &lt;code&gt;:temporary&lt;/code&gt;: If I die at all, leave me dead.
My friends, what are we if not temporary processes, trying
to handle the right messages, lest we be killed by one
destined for someone else?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:temporary&lt;/code&gt; works for us here since we want to stop
consumers from potentially doing more damage. If it dies,
let it die.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ToxicityConsumer&lt;/code&gt; looks pretty similar, except it has
a different exchange and queue.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/3b810cae5094d909d3227c17cefc5144.js"&gt;&lt;/script&gt;

&lt;p&gt;On to the &lt;code&gt;ConsumerSupervisor&lt;/code&gt;. Since it&amp;rsquo;s supervising
processes that have the &lt;code&gt;:temporary&lt;/code&gt; restart option, the
strategy doesn&amp;rsquo;t really matter. We&amp;rsquo;re going to leave it
with the default &lt;code&gt;:one_for_one&lt;/code&gt; strategy.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/b20d803d25979e1944bef6a76fd834ff.js"&gt;&lt;/script&gt;

&lt;p&gt;We&amp;rsquo;ve added a couple of additional functions that we need
to support our &lt;code&gt;ConsumerMonitor&lt;/code&gt; process. The first one is
a list of all of the pid&amp;rsquo;s this supervisor is managing. The
second function terminates all of the children.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/fL89Fqv.png" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ConsumerMonitor&lt;/code&gt; will do well by its namesake but take
a look at its restart option.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/5ee793e6b707f601041ccdb787e69a72.js"&gt;&lt;/script&gt;

&lt;p&gt;We&amp;rsquo;re setting it&amp;rsquo;s restart strategy to &lt;code&gt;:transient&lt;/code&gt;. Reason
being, if this puppy dies for ANY other reason than what&amp;rsquo;s
on line 21, I want it alive. Notice we pass in a supervisor
as the argument to &lt;code&gt;start_link/1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On start, we monitor each of the supervisor&amp;rsquo;s pids and
just wait&amp;hellip; as soon as a process dies, we instruct the
supervisor to execute order 66.
&lt;div&gt; &lt;img src="https://i.imgur.com/6lGqb8n.png" width="100%"/&gt; &lt;div&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ConsumerGroupSupervisor&lt;/code&gt; ties it all together. Pay
special attention to the strategy option.
&lt;script src="https://gist.github.com/octosteve/1317e3e7d12dde6e9e698ed4e751f3ca.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Supervisors get started sequentially. We &lt;strong&gt;completely&lt;/strong&gt; start
the &lt;code&gt;ConsumerSupervisor&lt;/code&gt; before we start the
&lt;code&gt;ConsumerMonitor&lt;/code&gt;. The ensures the pids are started and
ready to be monitored. The &lt;code&gt;:rest_for_one&lt;/code&gt; strategy allows
the monitor to fail and recover without disturbing the
consumers, but will allow us to &lt;em&gt;heal&lt;/em&gt; the system. More on
that later.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add this to our application and take it out for a
spin.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/1e9b41eab6b66ee867cd1569a0e862e1.js"&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at what this looks like in observer.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
&lt;img width="100%" src="https://i.imgur.com/pe27V20.gif" /&gt;
&lt;div&gt;&lt;/p&gt;

&lt;h2&gt;Supervisors are awesome&lt;/h2&gt;

&lt;p&gt;Our tree dies when it&amp;rsquo;s supposed, and comes back up in a fresh state when needed. LOVE IT!&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;That feeling when you configure the perfect supervision tree ❤️ &lt;a href="https://twitter.com/hashtag/myelixirstatus?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#myelixirstatus&lt;/a&gt; come see what I&amp;rsquo;m talking about over at &lt;a href="https://t.co/zaKaXqCwt5"&gt;https://t.co/zaKaXqCwt5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Steven Nunez 🇩🇴🇺🇸🙅 (@_StevenNunez) &lt;a href="https://twitter.com/_StevenNunez/status/1292215852469825539?ref_src=twsrc%5Etfw"&gt;August 8, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Connection Pools and RabbitMQ</title>
    <link rel="alternate" href="https://hostiledeveloper.com/2020/08/09/connection-pools-and-rabbitmq.html"/>
    <id>https://hostiledeveloper.com/2020/08/09/connection-pools-and-rabbitmq.html</id>
    <published>2020-08-09T02:04:00Z</published>
    <updated>2021-04-16T15:16:13-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In this post, we&amp;rsquo;re going to go over connection pools how to use ex_rabbit_pool to manage connections and channels.
These concepts will be covered further in my &lt;a href="https://2020.elixirconf.com/trainers/4/course"&gt;course at ElixirConf&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Connection Pools&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve used Ecto, you&amp;rsquo;ve used connection pools. Connection pools allow you to allocate a number of connections to a service and allow processes in your system to use those connections to do work concurrently. In the case of Ecto, when you make a query, one of the available connections is checked out, used to make the query and return results. When it&amp;rsquo;s done, it goes back in the pool.&lt;/p&gt;

&lt;p&gt;With RabbitMQ ideally you&amp;rsquo;re going to have &lt;a href="https://www.cloudamqp.com/blog/2018-01-19-part4-rabbitmq-13-common-errors.html"&gt;1 connection per resource&lt;/a&gt;. One connection for publishing, and one connection for consuming. When we use connection pools with Rabbit, we&amp;rsquo;re &lt;em&gt;really&lt;/em&gt; going to be configuring a &lt;strong&gt;channel pool&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Connections and Channels&lt;/h2&gt;

&lt;p&gt;Think of a connection as a tunnel, and a channel as a bunch of runners that go through the tunnel.
&lt;img alt="Download?force=true&amp;amp;w=640" src="https://unsplash.com/photos/3fzYRVQu_3c/download?force=true&amp;amp;w=640" /&gt;&lt;/p&gt;

&lt;p&gt;Photo by Marcos Nieto on Unsplash&lt;/p&gt;

&lt;p&gt;These slackers aren&amp;rsquo;t very inspiring.&lt;/p&gt;

&lt;p&gt;Channels allow you to multiplex over a single TCP connection. Since connections are pretty heavy (costing the server about 100KB), channels give us a way find the resource sweet spot. The &lt;a href="https://www.rabbitmq.com/channels.html#resource-usage"&gt;Channels guide&lt;/a&gt; notes that pooling should be used when managing your own channels becomes a pain but why not go for broke from the jump?&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with a project:&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/6d1a15f7a45572c9a39cbcf94e33cdae.js"&gt;&lt;/script&gt;

&lt;p&gt;Open up &lt;code&gt;mix.exs&lt;/code&gt; and add &lt;a href="https://github.com/esl/ex_rabbit_pool"&gt;ex_rabbit_pool&lt;/a&gt;, then run &lt;code&gt;mix deps.get&lt;/code&gt;&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/82cb9836bc4a7d1648cf46e62509341f.js"&gt;&lt;/script&gt;

&lt;p&gt;Great! Let&amp;rsquo;s start out with the easier of the 2. The publishing pool. Again, we&amp;rsquo;re going for a SINGLE connection but multiple channels. Since publishers don&amp;rsquo;t block, we can keep the count pretty low. Let&amp;rsquo;s start out with 2 channels.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/fcf9706108409911248a133ebd6a9320.js"&gt;&lt;/script&gt;

&lt;p&gt;A whole-lotta code. Let&amp;rsquo;s jump right in:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you&amp;rsquo;ve worked with &lt;a href="https://github.com/devinus/poolboy"&gt;Poolboy&lt;/a&gt; before, this syntax should look familiar.
We&amp;rsquo;re configuring 1 &lt;code&gt;ExRabbitPool.Worker.RabbitConnection&lt;/code&gt; process to be checkout-able. These configs go straight to Poolboy.&lt;/li&gt;
&lt;li&gt;These rabbit configs get passed in to the worker when it&amp;rsquo;s checked out.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ve been using these sweet &lt;code&gt;child_spec/1&lt;/code&gt; functions since Elixir 1.5! They let you define what it means to &lt;em&gt;start&lt;/em&gt; your server.
Here, we&amp;rsquo;re doing a little&amp;hellip; but with a lot of code. &lt;code&gt;id&lt;/code&gt; is what your Supervisor will use to track your process. &lt;code&gt;start&lt;/code&gt;, well, that&amp;rsquo;s how you start the dang thing. Notice we&amp;rsquo;re just delegating to &lt;code&gt;ExRabbitPool.PoolSupervisor.start_link/2&lt;/code&gt;. That second argument to the Pool Supervisor&amp;rsquo;s &lt;code&gt;start_link&lt;/code&gt; is the name you can use to reference this process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add this to &lt;code&gt;application.ex&lt;/code&gt;
&lt;script src="https://gist.github.com/octosteve/8318539fd3d5e82cd1a7ca97b1f41436.js"&gt;&lt;/script&gt;
Run &lt;code&gt;iex -S mix&lt;/code&gt; and you&amp;rsquo;ll see this in observer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imgur.com/cnWlTDU"&gt;&lt;img width="100%" src="https://i.imgur.com/cnWlTDU.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the Rabbit Console and you&amp;rsquo;ll see 1 connection and 2 channels. Just what we want!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imgur.com/tPwPhop"&gt;&lt;img src="https://i.imgur.com/tPwPhop.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a publisher that publishes to a &lt;code&gt;what_should_we_do&lt;/code&gt; exchange with a payload of &amp;ldquo;Pool Time!&amp;rdquo;
&lt;script src="https://gist.github.com/octosteve/f19d7a058ae5350feb0e936383f8f584.js"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ExRabbitPool.RabbitMQ&lt;/code&gt; module &lt;a href="https://github.com/esl/ex_rabbit_pool/blob/master/lib/clients/rabbitmq.ex"&gt;delegates all of it&amp;rsquo;s calls&lt;/a&gt; to the underlying
&lt;a href="https://github.com/pma/amqp"&gt;amqp&lt;/a&gt; library, but we&amp;rsquo;ll use this to support any
changes they may make in the future. Don&amp;rsquo;t worry about declaring the exchange multiple
times. The only time this will cause a problem is if you call it with different configurations
on subsequent calls.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;iex&lt;/code&gt; run &lt;code&gt;Pooler.PoolTimePublisher.publish&lt;/code&gt;, then open the rabbit console to see
your new exchange!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imgur.com/iczQAPS"&gt;&lt;img src="https://i.imgur.com/iczQAPS.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Consumers&lt;/h2&gt;

&lt;p&gt;Peanut butter has Jelly, Publishers have consumers. We&amp;rsquo;re going to take a different approach for consumers, instead using a provided macro that hides all of the
fetching and returning stuff the &lt;code&gt;ExRabbitPool.with_channel/2&lt;/code&gt; function was doing for you.&lt;/p&gt;

&lt;p&gt;First, we need a new pool.&lt;/p&gt;

&lt;h3&gt;Consumer Pool&lt;/h3&gt;

&lt;p&gt;Very similar to the Publisher Pool, except we&amp;rsquo;re going to bump the channels to 5. This is something we&amp;rsquo;d tweak over time, with a good signal being that your consumers occasionally crash because they can&amp;rsquo;t get a channel. This could be due to consumers taking a long time to finish a request, or having more concurrent work than you have channels. In any event, this is something you&amp;rsquo;ll have to tweak for your environment.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/ce73de390dc416f17e22ba2bf258a7ae.js"&gt;&lt;/script&gt;

&lt;p&gt;Same as before except with a higher channel count. Be sure to update &lt;code&gt;application.ex&lt;/code&gt;&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/a999e4089dc034d27786adc104ba19b5.js"&gt;&lt;/script&gt;

&lt;p&gt;On to our Consumer.
The best APIs offer nice abstractions but let you reach into the internals when needed. We&amp;rsquo;ll see how in a bit.
We&amp;rsquo;re going to create a queue that consumes messages from
our exchange. We&amp;rsquo;re going to use a named durable queue to allow us to stop consumers
and not lose messages.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/816d77c74b0850c985fd76a8ae5de357.js"&gt;&lt;/script&gt;

&lt;p&gt;A lot going is on here but let&amp;rsquo;s take a look.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;re defining our &lt;code&gt;child_spec/1&lt;/code&gt; that passes in the consumer pool we defined and a queue.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup_channel/2&lt;/code&gt; is one of the defined hooks that let us setup any additional connections and bindings prior to consuming messages on the queue. As previously mentioned, don&amp;rsquo;t worry about redeclaring the exchange, or the queue for that matter. You&amp;rsquo;ll only get an issue if you try to change its properties.&lt;/li&gt;
&lt;li&gt;This is where the money is 💰💰💰. &lt;code&gt;basic_deliver/3&lt;/code&gt; gets called when a message makes its way to our queue. We&amp;rsquo;re on the hook for returning &lt;code&gt;:ok&lt;/code&gt; or &lt;code&gt;{:stop, reason}&lt;/code&gt; to kill the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The other callbacks defined are &lt;code&gt;basic_consume_ok/2&lt;/code&gt;, triggered when a consumer successfully joins, and
kbasic&lt;em&gt;cancel/3&lt;code&gt;&lt;/code&gt;basic&lt;/em&gt;cancel_ok/2` for handling cancellation events.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to update &lt;code&gt;application.ex&lt;/code&gt;&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/7a29ab01e5986873c732168518713368.js"&gt;&lt;/script&gt;

&lt;h2&gt;Test Drive&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see how you work with this thing. Let&amp;rsquo;s publish a message that says &amp;ldquo;Pool Time!&amp;rdquo; on to the &lt;code&gt;what_should_we_do&lt;/code&gt; exchange.&lt;/p&gt;

&lt;p&gt;Start firing off those messages with &lt;code&gt;Pooler.PoolTimePublisher.publish/0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imgur.com/OhIVclm"&gt;&lt;img src="https://i.imgur.com/OhIVclm.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SUCH POWER!!&lt;/p&gt;

&lt;h2&gt;Why bother&lt;/h2&gt;

&lt;p&gt;This might seem like a big lift, but there&amp;rsquo;s one big benefit to not having to manage your own channel
handshakes. Failure. If you were managing channels and connections on your own, you&amp;rsquo;d have to write a slew of other processes to
free up resources when you failed. Or you&amp;rsquo;d have to set up separate monitors to clean up after your GenServers. With
&lt;code&gt;ExRabbitPool&lt;/code&gt; you keep things in a clean, expected state. Let&amp;rsquo;s update our consumer to raise an exception like an
underslept teenager. We&amp;rsquo;re going to change the restart strategy to &lt;code&gt;:temporary&lt;/code&gt; to not bring down the world,.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/fa6109cd145231b5b980fac2e8da89db.js"&gt;&lt;/script&gt;

&lt;p&gt;Go ahead and publish some messages. Sure it crashes, but look at your stats.&lt;/p&gt;

&lt;p&gt;Rabbit is holding on to your message until you get can get your act together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imgur.com/EnLDYSG"&gt;&lt;img src="https://i.imgur.com/EnLDYSG.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip; and your channels are ready to field new requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imgur.com/xIjvVdl"&gt;&lt;img src="https://i.imgur.com/xIjvVdl.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for today. Thanks for reading.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Organizing LiveView Logic with Presentation Models</title>
    <link rel="alternate" href="https://hostiledeveloper.com/2020/06/19/organizing-liveview-logic-with-presentation-models.html"/>
    <id>https://hostiledeveloper.com/2020/06/19/organizing-liveview-logic-with-presentation-models.html</id>
    <published>2020-06-19T17:31:00Z</published>
    <updated>2021-04-16T15:16:13-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been really enjoying Phoenix LiveView! Working on smart interfaces is super easy and just works. It&amp;rsquo;s really incredible.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been going through the &lt;a href="https://pragmaticstudio.com/phoenix-liveview"&gt;PragmaticStudio LiveView course&lt;/a&gt; and have been LOVING IT. If you just hearing about it, SIGN UP NOW (well maybe after reading this post&amp;hellip;). You&amp;rsquo;ll thank me. It&amp;rsquo;s really well done and is the best way to get your head around the awesomeness of LiveView.&lt;/p&gt;

&lt;p&gt;They build a series of UI patterns in LiveView to show you how simple it is to add seemingly complex interactions into a Phoenix app. In one module, the implement search. Having been a teacher in a previous life I know that sometimes you have to keep things simple at the cost of implementing better patterns. One such example is &lt;a href="https://github.com/pragmaticstudio/live_view_studio/blob/0420ed745e71f931d17d70e32f5be1b72cfa1495/lib/live_view_studio_web/live/search_live.ex"&gt;this LiveView&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing &lt;em&gt;wrong&lt;/em&gt; with their code. It works! But I think it suffers from tutorial-itis, where it&amp;rsquo;s enough to prove a point, but not what you would actually ship.&lt;/p&gt;

&lt;h2&gt;Thinking in Layers&lt;/h2&gt;

&lt;p&gt;LiveViews suffer from the same neck snapping, eye darting issues as GenServers. With a GenServer you define a client API, then a server API. Check the client API for the arguments passed in. Did we pattern match on the client side? Look for &lt;code&gt;handle_*&lt;/code&gt; to see what it does, and how it handles errors. Also, testing complex logic in GenServers is less than great. But that&amp;rsquo;s fine! We have a way to deal with this by decoupling our &lt;a href="https://pragprog.com/titles/jgotp/"&gt;Boundary Layer&lt;/a&gt; from our core business logic, breaking them into nice, pure functions we can easily test.&lt;/p&gt;

&lt;p&gt;LiveViews are a bit different though. The data we want to isolate isn&amp;rsquo;t really part of our &lt;em&gt;core&lt;/em&gt; business logic. In fact, in most cases, it exists to deliver a single experience in your app.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the code example. It stores a few pieces of state that get manipulated over the course of the page&amp;rsquo;s life.
&lt;script src="https://gist.github.com/octosteve/f384871008825b16bc09819267f28721.js"&gt;&lt;/script&gt;
In the example, the &lt;code&gt;LiveViewStudio.Stores&lt;/code&gt; module runs our search and is very much part of our &lt;em&gt;core&lt;/em&gt; business logic. This might be some code that gets optimized and used in several places in our app in a number of contexts. The results from our search will be stored in &lt;code&gt;stores&lt;/code&gt;. Our LiveView can potentially act on the data it got back from the data store, further decorating it in preparation to render it. Along with &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;loading&lt;/code&gt;, this specific interpretation of &lt;code&gt;stores&lt;/code&gt; would never be used outside of this view. Why does this matter?&lt;/p&gt;

&lt;h2&gt;Separation of concerns and testing&lt;/h2&gt;

&lt;p&gt;The more complex our transformations get, the more state we have to hold at different points of this page&amp;rsquo;s life in response to user actions or other process&amp;rsquo; messages, the more we&amp;rsquo;d benefit from separating out a functional core.&lt;/p&gt;

&lt;p&gt;Now I know that LiveView has &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html"&gt;great ways&lt;/a&gt; of mimicking clicks, and changes from your front-end, as well as a way to send messages to that process to simulate internal messages, but we still want to keep our Boundary Layer small, and extract our logic into small testable modules.&lt;/p&gt;

&lt;p&gt;A quick note before we move on&amp;hellip; I know this is going to be a LOT of code for solving a relatively small problem. I think this pattern will come in handy when you&amp;rsquo;re dealing with apps that take advantage of &lt;code&gt;live_action&lt;/code&gt; and have a single LiveView render several subcomponents. For now&amp;hellip; Go with me.&lt;/p&gt;

&lt;h2&gt;Extracting the Module&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://martinfowler.com/eaaDev/PresentationModel.html"&gt;Presentation Model&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Represent the state and behavior of the presentation independently of the GUI controls used in the interface - Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;re going to extract the state for this component, and encapsulate the logic a bit. We showed the state, but what&amp;rsquo;s this thing do?
Users are presented a search box, where, the request takes 2 seconds to complete. Between submission and bringing up results, a &lt;code&gt;loading&lt;/code&gt; icon appears.&lt;/p&gt;

&lt;div&gt;
&lt;iframe src="https://giphy.com/embed/fA1JrSOgltr5VoPvGK" width="480" height="352" frameBorder="0" class="giphy-embed" allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="https://giphy.com/gifs/fA1JrSOgltr5VoPvGK"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;The flow looks something like:
1. Send query to LiveView
2. LiveView sets a loading state, sends self message to actually RUN the query, and returns the new &lt;code&gt;loading&lt;/code&gt; state.
3. Query finishes asynchronously, updates state with results, clears the loading state and returns that to the view.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start out with some tests:&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/03c6e76849653104ec97f2b777f0e67b.js"&gt;&lt;/script&gt;

&lt;p&gt;Our module expects to receive a function that takes one argument. Note we&amp;rsquo;ve broken up the flow between preparing the query (storing it) and actually executing it.
OK, on to the code.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/c347f9339e48142c922b994ce0991b31.js"&gt;&lt;/script&gt;

&lt;p&gt;OK, so this is a lot of code, compared to what the final result I linked to earlier but let&amp;rsquo;s think about what we&amp;rsquo;ve won. There are clearly 3 things this module can do. Each of those things has a clear pipeline describing what it means to execute it. And best of all, it&amp;rsquo;s all pure! We don&amp;rsquo;t have to simulate clicks, or mess with input fields. We can test plain old values. Adding a new feature to this and verifying it works with automated tests is trivial. Imagine how you would add the ability to ensure a zip code is only numbers? Or that they&amp;rsquo;re 5 characters long?&lt;/p&gt;

&lt;h2&gt;Updating the LiveView&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to take a look at what the &lt;code&gt;SearchLive&lt;/code&gt; LiveView would look like using this Presentation Model.&lt;/p&gt;

&lt;script src="https://gist.github.com/octosteve/0e7db950bfcfd93743cdbe1199042b60.js"&gt;&lt;/script&gt;

&lt;p&gt;SO NICE! Our live view is solely responsible for making sure the right parts of our Presentation Model module get called and use it to render state. Notice how we&amp;rsquo;re using &lt;code&gt;@presentation_model.x&lt;/code&gt;. If you&amp;rsquo;re wondering, there&amp;rsquo;s no hit to performance using this! LiveView does a diff on the server before sending the change over the wire. If there&amp;rsquo;s no change, it doesn&amp;rsquo;t send anything. And what&amp;rsquo;s best is that to test the LiveView, you only have to test a couple of cases for success and failure, as opposed to every detail and edge case of the view logic.
This is kind of great.&lt;/p&gt;

&lt;h2&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;LiveView is awesome, and with the right patterns we can ensure our fancy UIs have equally fancy tests. You can build really complex logic that you will KNOW works. Thanks for reading. Happy Clacking.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Salesforce Outbound messages and Phoenix</title>
    <link rel="alternate" href="https://hostiledeveloper.com/2020/05/09/salesforce-outbound-messages-and-phoenix.html"/>
    <id>https://hostiledeveloper.com/2020/05/09/salesforce-outbound-messages-and-phoenix.html</id>
    <published>2020-05-09T02:11:00Z</published>
    <updated>2021-04-16T15:16:13-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Let&amp;rsquo;s sell some stuff!&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.salesforce.com/"&gt;Salesforce&lt;/a&gt; is an incredibly popular and powerful sales tracking system. With over 150k customers
and an extensible platform, it&amp;rsquo;s a great opportunity to use our favorite programming language to get in on the action.&lt;/p&gt;

&lt;p&gt;There are several libraries to access the SalesForce API like Jeff Weiss&amp;rsquo; &lt;a href="https://github.com/jeffweiss/forcex"&gt;forcex&lt;/a&gt;,
but not too much written about handling Outbound Messages.&lt;/p&gt;

&lt;h2&gt;Outbound Messages&lt;/h2&gt;

&lt;p&gt;Outbound Messages are webhooks that are triggered when a Salesforce object is updated. There are 
&lt;a href="https://medium.com/@MicroPyramid/how-to-set-up-outbound-messaging-in-salesforce-42a0a08e65b1"&gt;tutorials&lt;/a&gt; 
on how to &lt;a href="https://www.salesforcetutorial.com/generating-outbound-message-workflow-action/"&gt;setup&lt;/a&gt;
the Salesforce side of this, so I won&amp;rsquo;t be covering it. Assume there&amp;rsquo;s an Outbound Messages set to trigger whenever
the &lt;em&gt;Stage&lt;/em&gt; of an &lt;em&gt;Opportunity&lt;/em&gt; has been updated.&lt;/p&gt;

&lt;h3&gt;Getting the message&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is build a way to accept the Outbound message from Salesforce. This may make some of you
cringe but we&amp;rsquo;re going to have to accept&amp;hellip; XML. Particularly, a SOAP response. If you don&amp;rsquo;t know what SOAP is, don&amp;rsquo;t 
worry about it. We&amp;rsquo;re going to treat this like regular XML.&lt;/p&gt;

&lt;h3&gt;Plug Parsers&lt;/h3&gt;

&lt;p&gt;Crack open your &lt;code&gt;endpoint.ex&lt;/code&gt; file and you should see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;  &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Parsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;parsers:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:urlencoded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:multipart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:json&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;pass:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;json_decoder:&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the covers, Plug comes with a few modules to handle json, multipart and url encoded requests.
You can take a look at the code for &lt;code&gt;urlencoded&lt;/code&gt;&amp;lsquo;s parser
&lt;a href="https://github.com/elixir-plug/plug/blob/65986ad32f9aaae3be50dc80cbdd19b326578da7/lib/plug/parsers/urlencoded.ex"&gt;here&lt;/a&gt;.
Every parser needs 2 functions. an &lt;code&gt;init/1&lt;/code&gt; function for compiled configuration, and a &lt;code&gt;parse/5&lt;/code&gt; function.
The &lt;a href="https://hexdocs.pm/plug/Plug.Parsers.html#c:parse/5"&gt;&lt;code&gt;parse/5&lt;/code&gt;&lt;/a&gt; function returns a tuple with &lt;code&gt;{:ok, params, conn}&lt;/code&gt;
if it &lt;em&gt;can&lt;/em&gt; parse this kind of request, or &lt;code&gt;{:next, conn}&lt;/code&gt; if it can&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;One parser that&amp;rsquo;s missing is an XML parser! No worries. We can handle all of our processing of the Outbound Message in the
parser leaving our controller to code to deal with our nice, cleanly parsed data.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make a new Parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SFDCWebhookParser&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;notifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extract_from_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;notifications:&lt;/span&gt; &lt;span class="n"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_subtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_opts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have a parser that responds to messages with a content type of &amp;ldquo;text/xml&amp;rdquo; since we&amp;rsquo;re getting a SOAP message. 
We call &lt;code&gt;Plug.Conn.read_body/2&lt;/code&gt; in order to load request body. Then we pass it into our (as yet to be written) &lt;code&gt;extract_from_webhook/1&lt;/code&gt; function.
In order to work on that&amp;hellip; we&amp;rsquo;ll need to dive into parsing XML with &lt;a href="https://hexdocs.pm/sweet_xml/SweetXml.html"&gt;SweetXml&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;SweetXml&lt;/h3&gt;

&lt;p&gt;For this next bit, we&amp;rsquo;re going to need to talk about &lt;a href="https://www.w3schools.com/xml/xpath_intro.asp"&gt;XPath&lt;/a&gt;. XPath is a way of 
traversing nodes in a tree. Take this HTML for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sd"&gt;"""
&amp;lt;div&amp;gt;
  &amp;lt;ul edible="no"&amp;gt;
    &amp;lt;li&amp;gt;One fish&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Two Fish&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Red Fish&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Blue Fish&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
"""&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can use &lt;code&gt;SweetXml&lt;/code&gt; to extract out some data from this markup and put in in a map for us.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="no"&gt;SweetXml&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="sx"&gt;~x"//ul"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# From the root, find a ul node&lt;/span&gt;
 &lt;span class="ss"&gt;edible:&lt;/span&gt; &lt;span class="sx"&gt;~x"@edible"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# From that node, read its `edible` attribute&lt;/span&gt;
 &lt;span class="ss"&gt;items:&lt;/span&gt; &lt;span class="sx"&gt;~x"./li/text()"&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="c1"&gt;# Also from that node, find any li nodes and return their text. The `l` informs it we want a list back.&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;edible:&lt;/span&gt; &lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;items:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'One fish'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Two Fish'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Red Fish'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Blue Fish'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, we have enough to get data out of our Webhook.&lt;/p&gt;

&lt;h3&gt;Notification Message&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_wsdl.htm"&gt;docs&lt;/a&gt; give
an outline of the anatomy of a message. Here&amp;rsquo;s a sample message from the sandbox environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;soapenv:Envelope&lt;/span&gt; &lt;span class="na"&gt;xmlns:soapenv=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.xmlsoap.org/soap/envelope/"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;notifications&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://soap.sforce.com/2005/09/outbound"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;OrganizationId&amp;gt;&lt;/span&gt;00D5w000004qGTOEA2&lt;span class="nt"&gt;&amp;lt;/OrganizationId&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ActionId&amp;gt;&lt;/span&gt;04k5w000000TSwMAAW&lt;span class="nt"&gt;&amp;lt;/ActionId&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;SessionId&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/SessionId&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;EnterpriseUrl&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/EnterpriseUrl&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;PartnerUrl&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/PartnerUrl&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Notification&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Id&amp;gt;&lt;/span&gt;04l5w00005286hAAAQ&lt;span class="nt"&gt;&amp;lt;/Id&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sObject&lt;/span&gt; &lt;span class="na"&gt;xsi:type=&lt;/span&gt;&lt;span class="s"&gt;"sf:Opportunity"&lt;/span&gt; &lt;span class="na"&gt;xmlns:sf=&lt;/span&gt;&lt;span class="s"&gt;"urn:sobject.enterprise.soap.sforce.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:Id&amp;gt;&lt;/span&gt;0065w000023STAmAAO&lt;span class="nt"&gt;&amp;lt;/sf:Id&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:AccountId&amp;gt;&lt;/span&gt;0015w00002BFDeLAAX&lt;span class="nt"&gt;&amp;lt;/sf:AccountId&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:Amount&amp;gt;&lt;/span&gt;45000.0&lt;span class="nt"&gt;&amp;lt;/sf:Amount&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:CloseDate&amp;gt;&lt;/span&gt;2020-07-11&lt;span class="nt"&gt;&amp;lt;/sf:CloseDate&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:ContactId&amp;gt;&lt;/span&gt;0035w000035gg9GAAQ&lt;span class="nt"&gt;&amp;lt;/sf:ContactId&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:CreatedById&amp;gt;&lt;/span&gt;0055w00000BhqR0AAJ&lt;span class="nt"&gt;&amp;lt;/sf:CreatedById&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:CreatedDate&amp;gt;&lt;/span&gt;2020-05-08T13:40:22.000Z&lt;span class="nt"&gt;&amp;lt;/sf:CreatedDate&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:FiscalQuarter&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/sf:FiscalQuarter&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:FiscalYear&amp;gt;&lt;/span&gt;2020&lt;span class="nt"&gt;&amp;lt;/sf:FiscalYear&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:Follow_Up__c&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:Follow_Up__c&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:HasOpenActivity&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:HasOpenActivity&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:HasOpportunityLineItem&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:HasOpportunityLineItem&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:HasOverdueTask&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:HasOverdueTask&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:IsClosed&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:IsClosed&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:IsDeleted&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:IsDeleted&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:IsWon&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/sf:IsWon&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:LastModifiedById&amp;gt;&lt;/span&gt;0055w00000BhqR0AAJ&lt;span class="nt"&gt;&amp;lt;/sf:LastModifiedById&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:LastModifiedDate&amp;gt;&lt;/span&gt;2020-05-09T03:04:32.000Z&lt;span class="nt"&gt;&amp;lt;/sf:LastModifiedDate&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:LastReferencedDate&amp;gt;&lt;/span&gt;2020-05-09T03:06:37.000Z&lt;span class="nt"&gt;&amp;lt;/sf:LastReferencedDate&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:LastViewedDate&amp;gt;&lt;/span&gt;2020-05-09T03:06:37.000Z&lt;span class="nt"&gt;&amp;lt;/sf:LastViewedDate&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:LeadSource&amp;gt;&lt;/span&gt;External Referral&lt;span class="nt"&gt;&amp;lt;/sf:LeadSource&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:Name&amp;gt;&lt;/span&gt;Backpackers, Inc. (Sample)&lt;span class="nt"&gt;&amp;lt;/sf:Name&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:OwnerId&amp;gt;&lt;/span&gt;0055w00000BhqR0AAJ&lt;span class="nt"&gt;&amp;lt;/sf:OwnerId&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:Probability&amp;gt;&lt;/span&gt;80.0&lt;span class="nt"&gt;&amp;lt;/sf:Probability&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:StageName&amp;gt;&lt;/span&gt;Negotiation/Review&lt;span class="nt"&gt;&amp;lt;/sf:StageName&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;sf:SystemModstamp&amp;gt;&lt;/span&gt;2020-05-09T03:04:32.000Z&lt;span class="nt"&gt;&amp;lt;/sf:SystemModstamp&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/sObject&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Notification&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/notifications&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/soapenv:Body&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s pretty beefy, but parsing will be pretty straight forward. The documentation states we may get up to 100 notification 
nodes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="no"&gt;SweetXml&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;extract_from_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sx"&gt;~x"//Notification"&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Support for multiple notifications&lt;/span&gt;
  &lt;span class="ss"&gt;message_id:&lt;/span&gt; &lt;span class="sx"&gt;~x"./Id/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;type:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/@xsi:type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;object_id:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:Id/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;account_id:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:AccountId/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;amount:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:Amount/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;close_date:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:CloseDate/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;contact_id:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:ContactId/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;created_by_id:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:CreatedById/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;created_date:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:CreatedDate/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;fiscal_quarter:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:FiscalQuarter/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;fiscal_year:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:FiscalYear/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;follow_up:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:Follow_Up__c/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;has_open_activity:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:HasOpenActivity/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;has_opportunity_line_item:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:HasOpportunityLineItem/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;has_overdue_task:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:HasOverdueTask/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;is_closed:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:IsClosed/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;is_deleted:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:IsDeleted/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;is_won:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:IsWon/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;last_modified:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:LastModifiedById/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;last_modified_date:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:LastModifiedDate/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;last_reference_date:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:LastReferencedDate/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;last_viewed_date:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:LastViewedDate/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;lead_source:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:LeadSource/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:Name/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;owner_id:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:OwnerId/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;probability:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:Probability/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;stage_name:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:StageName/text()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;system_modstamp:&lt;/span&gt; &lt;span class="sx"&gt;~x"./sObject/sf:SystemModstamp/text()"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will return the following as params:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;%{&lt;/span&gt;
    &lt;span class="ss"&gt;account_id:&lt;/span&gt; &lt;span class="s1"&gt;'0015w00002BFDeLAAX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;amount:&lt;/span&gt; &lt;span class="s1"&gt;'45000.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;close_date:&lt;/span&gt; &lt;span class="s1"&gt;'2020-07-11'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;contact_id:&lt;/span&gt; &lt;span class="s1"&gt;'0035w000035gg9GAAQ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;created_by_id:&lt;/span&gt; &lt;span class="s1"&gt;'0055w00000BhqR0AAJ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;created_date:&lt;/span&gt; &lt;span class="s1"&gt;'2020-05-08T13:40:22.000Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;fiscal_quarter:&lt;/span&gt; &lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;fiscal_year:&lt;/span&gt; &lt;span class="s1"&gt;'2020'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;follow_up:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;has_open_activity:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;has_opportunity_line_item:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;has_overdue_task:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;is_closed:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;is_deleted:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;is_won:&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;last_modified:&lt;/span&gt; &lt;span class="s1"&gt;'0055w00000BhqR0AAJ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;last_modified_date:&lt;/span&gt; &lt;span class="s1"&gt;'2020-05-09T03:04:32.000Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;last_reference_date:&lt;/span&gt; &lt;span class="s1"&gt;'2020-05-09T03:06:37.000Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;last_viewed_date:&lt;/span&gt; &lt;span class="s1"&gt;'2020-05-09T03:06:37.000Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;lead_source:&lt;/span&gt; &lt;span class="s1"&gt;'External Referral'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;message_id:&lt;/span&gt; &lt;span class="s1"&gt;'04l5w00005286hAAAQ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="s1"&gt;'Backpackers, Inc. (Sample)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;object_id:&lt;/span&gt; &lt;span class="s1"&gt;'0065w000023STAmAAO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;owner_id:&lt;/span&gt; &lt;span class="s1"&gt;'0055w00000BhqR0AAJ'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;probability:&lt;/span&gt; &lt;span class="s1"&gt;'80.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;stage_name:&lt;/span&gt; &lt;span class="s1"&gt;'Negotiation/Review'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;system_modstamp:&lt;/span&gt; &lt;span class="s1"&gt;'2020-05-09T03:04:32.000Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;type:&lt;/span&gt; &lt;span class="s1"&gt;'sf:Opportunity'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Woot! Now that map will be passed in &lt;code&gt;params&lt;/code&gt; to your controller actions. There&amp;rsquo;s one more thing we need to make Salesforce happy.&lt;/p&gt;

&lt;h3&gt;The response.&lt;/h3&gt;

&lt;p&gt;Say we&amp;rsquo;re routing Outbound messages to &lt;code&gt;SalesforceWeb.WebhookController.webhook/2&lt;/code&gt;. We&amp;rsquo;ll need to respond with a SOAP
response to acknowledge the message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SalesforceWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;WebhookController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;SalesforceDotComWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:controller&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;do_cool_things&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_resp_content_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"text/xml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_resp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acknowledgement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;acknowledgement&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="sd"&gt;"""
    &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
        &amp;lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&amp;gt;
            &amp;lt;soapenv:Body&amp;gt;
                &amp;lt;notificationsResponse xmlns="http://soap.sforce.com/2005/09/outbound"&amp;gt;
                    &amp;lt;Ack&amp;gt;true&amp;lt;/Ack&amp;gt;
               &amp;lt;/notificationsResponse&amp;gt;
            &amp;lt;/soapenv:Body&amp;gt;
        &amp;lt;/soapenv:Envelope&amp;gt;
    """&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, we&amp;rsquo;re all set! NOTE: The acknowledgement will always be the same.&lt;/p&gt;

&lt;h1&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;d be nice to have type conversion of strings to booleans and dates, but this is a great start. I hope this was informative.&lt;/p&gt;

&lt;p&gt;Happy clacking!&lt;/p&gt;
</content>
  </entry>
</feed>
